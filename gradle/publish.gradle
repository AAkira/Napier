apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = ARTIFACT_ID
version = rootProject.ext.LIBRARY_VERSION_NAME

def pomConfig = {
    licenses {
        license {
            name POM_LICENSE_NAME
            url POM_LICENSE_URL
            distribution POM_LICENSE_DIST
        }
    }
    developers {
        developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
            organization POM_ORGANIZATION_NAME
            organizationUrl POM_ORGANIZATION_URL
        }
    }
    scm {
        url SITE_URL
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()
    publish = false
    override = true // for multi-platform Kotlin/Native publishing

    pkg {
        repo = BINTRAY_REPOSITORY
        name = BINTRAY_NAME
        userOrg = GROUP
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = rootProject.ext.LIBRARY_VERSION_NAME
            vcsTag = rootProject.ext.LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

def isMultiplatform = project.name == "napier"

afterEvaluate {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        if (isMultiplatform) {
            from kotlin.sourceSets.commonMain.kotlin
        } else {
            from sourceSets.main.allSource
        }
    }
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
}

afterEvaluate {
    publishing {
        def projectName = project.name

        publications.all {
            artifactId projectName
            pom.withXml {
                def root = asNode()
                root.appendNode('name', projectName)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', SITE_URL)
                root.children().last() + pomConfig
            }

            // rename artifacts
            groupId = BINTRAY_PACKAGE
            if (name == 'kotlinMultiplatform') {
                // native includes all artifacts info
                artifactId = "$projectName-ios"
                artifact sourcesJar
            } else if (name == 'metadata') {
                // common module
                artifactId = "$projectName"
            } else {
                artifactId = "$projectName-$name"
            }
            // disable metadata everywhere, but in ios modules
            if (!it.name.contains('ios')) {
                moduleDescriptorGenerator = null
            }
        }
    }
}

bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('-test') }.collect {
        it.name
    }
}

bintrayUpload.dependsOn publishToMavenLocal
