import org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile

apply plugin: 'kotlin-multiplatform'
apply from: 'android.gradle'

kotlin {
    android()
    // ios
    if (project.findProperty("device")?.toBoolean() ?: false) {
        iosArm64('ios') {
            binaries {
                framework('Common')
            }
        }
    } else {
        iosX64('ios') {
            binaries {
                framework('Common')
            }
        }
    }
    js {
        browser()
        compilations.all {
            tasks.withType(Kotlin2JsCompile) {
                kotlinOptions {
                    metaInfo = true
                    sourceMap = true
                    moduleKind = 'umd'
                }
            }
        }
    }
    jvm()

    sourceSets {
        commonMain {
            dependencies {
                implementation rootProject.ext.kotlinCommon
                implementation rootProject.ext.coroutineCommon

                implementation project(':napier')
            }
        }
        iosMain {
            dependencies {
                implementation rootProject.ext.coroutineNative
            }
        }
        jsMain {
            dependencies {
                implementation rootProject.ext.kotlinJs
                implementation rootProject.ext.coroutineJs
            }
        }
        jvmMain {
            dependencies {
                implementation rootProject.ext.kotlinJvm
                implementation rootProject.ext.coroutine
            }
        }
    }
}

// ios task
task packForXcode {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "ios"
    def framework = kotlin.targets."$target".compilations
            .main.target.binaries.findFramework("Common", buildType)

    dependsOn framework.linkTask

    doLast {
        copy {
            from framework.outputFile.parent
            into framework.outputFile.parentFile
            include 'data.framework/**'
            include 'data.framework.dSYM'
        }
    }
}

tasks.build.dependsOn packForXcode

task packForJs(type: Copy, dependsOn: compileKotlinJs) {
    from compileKotlinJs.destinationDir

    into "${buildDir}/js_modules"
}

tasks.build.dependsOn packForJs

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}
